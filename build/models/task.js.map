{"version":3,"file":"task.js","names":["Schema","mongoose","taskSchema","title","type","String","goal","required","author","readPermission","values","readPermissionTypes","message","compliments","doneAt","Number","createdAt","Date","getTime","updatedAt","timestamps","statics","create","payload","Task","task","save","findByUserId","find","findByQueriesTasks","queries","limit","offset","userId","start","end","option","$exists","$gte","$lte","result","sort","skip","patchByTaskId","taskId","console","log","findByIdAndUpdate","deleteByTaskId","findByIdAndDelete","model"],"sources":["../../src/models/task.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport {readPermissionTypes} from \"../utils/types.js\";\nconst {Schema} = mongoose;\n\nconst taskSchema = new Schema(\n\t{\n\t\ttitle: {type: String},\n\t\tgoal: {type: String, required: true},\n\t\tauthor: {type: String, required: true},\n\t\treadPermission: {\n\t\t\ttype: String,\n\t\t\tenum: {\n\t\t\t\tvalues: readPermissionTypes,\n\t\t\t\tmessage: `{VALUE} is not matched with everyone, me or none`,\n\t\t\t},\n\t\t\trequired: true,\n\t\t},\n\t\tcompliments: [],\n\t\tdoneAt: {type: Number, required: true},\n\t\tcreatedAt: {type: Number, default: new Date().getTime()},\n\t\tupdatedAt: {type: Number, default: new Date().getTime()},\n\t},\n\t{timestamps: true}\n);\n\n// POST: (title, goalId, author,readPermission, doneAt) 데이터를 보내면 저장한다\ntaskSchema.statics.create = async (payload) => {\n\tconst task = await new Task(payload);\n\treturn task.save();\n};\n\n// GET: author를 주면 모든 task 가져오기\ntaskSchema.statics.findByUserId = async (author) => {\n\treturn await Task.find({author});\n};\n\ntaskSchema.statics.findByQueriesTasks = async (queries, limit, offset) => {\n\tconst {readPermission, userId, start, end} = queries;\n\tconst option = {\n\t\treadPermission: readPermission || {$exists: true},\n\t\tuserId: userId || {$exists: true},\n\t\tdoneAt: start && end ? {$gte: start, $lte: end} : {$exists: true},\n\t};\n\n\tconst result = await Task.find(option);\n\n\tif (offset) return result.sort({doneAt: -1}).limit(limit).skip(offset);\n\treturn result;\n};\n\n// PATCH: taskId를 주면 task로 업데이트 진행\ntaskSchema.statics.patchByTaskId = async (taskId, task) => {\n\tconsole.log(taskId, task);\n\treturn await Task.findByIdAndUpdate(\n\t\ttaskId,\n\t\t{\n\t\t\ttitle: task.title && task.title,\n\t\t\tdoneAt: task.doneAt && task.doneAt,\n\t\t\tupdatedAt: new Date().getTime(),\n\t\t},\n\t\t{new: true}\n\t);\n};\n\n// DELETE: taskId를 삭제\ntaskSchema.statics.deleteByTaskId = async (taskId) => {\n\treturn await Task.findByIdAndDelete(taskId);\n};\n\nexport const Task = mongoose.model(\"Task\", taskSchema);\n"],"mappings":"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"}